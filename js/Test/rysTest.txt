class Base {
	getInfo() {
		return {
			id: 'Base', //Название класса, возможно нахуй не понадобится это
			name: 'Base Operations', //Название модуля
			//color: '#ff0000', // pure red
			//docsURI: 'https://ya.ru', //Документация к модулю
			description: 'Basic functions for operation', //Описание модуля
			blocks: [
				  {
					text: '( ) + ( )',
					opcode: 'add',
					description: 'Возвращает сумму двух чисел'
				  },
				  {
					text: '( ) - ( )',
					opcode: 'subtract',
					description: 'Возвращает разность двух чисел'
				  },
				  {
					text: '( ) * ( )',
					opcode: 'multiply',
					description: 'Возвращает произведение двух чисел'
				  },
				  {
					text: '( ) / ( )',
					opcode: 'divide',
					description: 'Возвращает частное двух чисел'
				  },
				  {
					text: 'length of ( )',
					opcode: 'length',
					description: 'Возвращает длину строки или количество цифр в числе'
				  },
				  {
					text: 'round ( )',
					opcode: 'round',
					description: 'Округляет число до ближайшего целого'
				  },
				  {
					text: 'abs ( )',
					opcode: 'abs',
					description: 'Возвращает абсолютное значение числа'
				  },
				  {
					text: 'floor ( )',
					opcode: 'floor',
					description: 'Округляет число в меньшую сторону'
				  },
				  {
					text: 'sqrt ( )',
					opcode: 'sqrt',
					description: 'Возвращает квадратный корень числа'
				  },
				  {
					text: 'ceil ( )',
					opcode: 'ceil',
					description: 'Округляет число в большую сторону'
				  },
				  {
					text: 'cos ( )',
					opcode: 'cos',
					description: 'Возвращает косинус угла в радианах'
				  },
				  {
					text: 'sin ( )',
					opcode: 'sin',
					description: 'Возвращает синус угла в радианах'
				  },
				  {
					text: 'tan ( )',
					opcode: 'tan',
					description: 'Возвращает тангенс угла в радианах'
				  },
				  {
					text: 'asin ( )',
					opcode: 'asin',
					description: 'Возвращает арксинус числа'
				  },
				  {
					text: 'acos ( )',
					opcode: 'acos',
					description: 'Возвращает арккосинус числа'
				  },
				  {
					text: 'atan ( )',
					opcode: 'atan',
					description: 'Возвращает арктангенс числа'
				  },
				  {
					text: 'ln ( )',
					opcode: 'ln',
					description: 'Возвращает натуральный логарифм числа'
				  },
				  {
					text: 'e^ ( )',
					opcode: 'exp',
					description: 'Возводит число e в степень аргумента'
				  },
				  {
					text: 'log ( )',
					opcode: 'log',
					description: 'Возвращает десятичный логарифм числа'
				  },
				  {
					text: 'random up to ( )',
					opcode: 'random',
					description: 'Генерирует случайное число от 0 до указанного значения'
				  },
				  {
					text: 'trunc ( )',
					opcode: 'trunc',
					description: 'Отбрасывает дробную часть числа, оставляя целую'
				  },
				  {
					text: 'ln ( )',
					opcode: 'ln',
					description: 'Возвращает натуральный логарифм числа (основание e)'
				  },
				  {
					text: 'e^ ( )',
					opcode: 'exp',
					description: 'Возводит число e в степень аргумента, e^a'
				  },
				  {
					text: 'log ( )',
					opcode: 'log10',
					description: 'Возвращает десятичный логарифм числа (основание 10)'
				  },
				  {
					text: '() pow ()',
					opcode: 'power',
					description: 'Возводит число a в степень b'
				  },
				  {
					text: 'random up to ( )',
					opcode: 'random',
					description: 'Генерирует случайное число от 0 до a (не включая a)'
				  },
				  {
					text: 'trunc ( )',
					opcode: 'trunc',
					description: 'Отбрасывает дробную часть числа, оставляя только целую часть'
				  }
			],
		};
	};
	
        // Арифметические операции
        add(args) {
          return args[0] + args[1];
        }
        subtract(args) {
          return args[0] - args[1];
        }
        multiply(args) {
          return args[0] * args[1];
        }
        divide(args) {
          if (args[1] === 0) {
            throw new Error("Деление на ноль");
          }
          return args[0] / args[1];
        }
		power(args) {
          return args[0] ** args[1];
        }
      
        // Функции округления
        floor(args) {
          return Math.floor(args[0]);
        }
        ceil(args) {
          return Math.ceil(args[0]);
        }
        round(args) {
          return Math.round(args[0]);
        }
        trunc(args) {
          return Math.trunc(args[0]);
        }
      
        // Тригонометрические функции
        sin(args) {
          return Math.sin(args[0]);
        }
        cos(args) {
          return Math.cos(args[0]);
        }
        tan(args) {
          return Math.tan(args[0]);
        }
        asin(args) {
          return Math.asin(args[0]);
        }
        acos(args) {
          return Math.acos(args[0]);
        }
        atan(args) {
          return Math.atan(args[0]);
        }
      
        // Логарифмические и экспоненциальные функции
        ln(args) {
          return Math.log(args[0]);
        }
        exp(args) {
          return Math.exp(args[0]);
        }
        log10(args) {
          return Math.log10(args[0]);
        }
      
        // Возведение в степень и корень
        sqrt(args) {
          return Math.sqrt(args[0]);
        }
        pow(args) {
          return Math.pow(args[0], args[1]);
        }
      
        // Другие математические функции
        abs(args) {
          return Math.abs(args[0]);
        }
        random(args) {
          return Math.random() * (args[0] - 0) + 0; // Генерация случайного числа от 0 до args[0]
        }
      
        // Дополнительная функция для демонстрации обработки строк
        length(args) {
          return String(args[0]).length; // Преобразует в строку и возвращает длину
        }
};
ext.register(Base);